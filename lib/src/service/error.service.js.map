{"version":3,"file":"error.service.js","sourceRoot":"","sources":["../../../src/service/error.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAgB,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACnE,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEzC,OAAO,EAAE,eAAe,EAAE,MAAM,GAAG,CAAC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEH,IAAa,YAAY,GAAzB,MAAa,YAAY;IAKvB,YAAoB,QAAkB,EAAU,eAAgC;QAA5D,aAAQ,GAAR,QAAQ,CAAU;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAC9E,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IAED;;;;;;;OAOG;IACI,QAAQ,CAAC,KAAa,EAAE,IAAY;QACzC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;SAChC;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QAChD,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC7B,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,YAAY;QACjB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;SAC1B;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACI,QAAQ;QACb,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE;YACnC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;SACrE;aAAM;YACL,QAAQ,CAAC,QAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjC;IACH,CAAC;IAED;;;;;;;;;OASG;IACI,WAAW,CAAC,KAAU;QAC3B,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACK,SAAS;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;CACF,CAAA;AAvFY,YAAY;IADxB,UAAU,EAAE;qCAMmB,QAAQ,EAA2B,eAAe;GALrE,YAAY,CAuFxB;SAvFY,YAAY","sourcesContent":["import { ErrorHandler, Injectable, Injector } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { ElectronService } from \".\";\n\n/**\n * Fehler-Behandlung\n *\n * Fuer allgemeine Fehler muss die Anwendung eine Route fuer \"/error\" bereitstellen.\n *\n * Wenn die Anwendung neu geladen werden soll, ist Folgendes zu beachten:\n *\n * Im Browser wird der Reload mit document.location.reload() erledigt.\n *\n * In electron wuerde das nicht funktionieren (zumindest nicht mit Angular-SPA).\n * Da muss der Reload auf der electron-Seite erfolgen. Im electron start-script\n * sieht das in etwa so aus:\n * <pre>\n *   ipcMain.on(\"reload-app\", function(event, arg) {\n *     console.log(\"APP RELOAD \" + arg);\n *     mainWindow.loadURL(url.format({\n *                           pathname: path.join(__dirname, 'index.html'),\n *                           protocol: 'file:',\n *                           slashes: true\n *                        }));\n *   });\n * </pre>\n *\n * @implements {ErrorHandler}\n */\n@Injectable()\nexport class ErrorService implements ErrorHandler {\n\n  private router: Router;\n  private readonly errors: Array<{ title: string, message: string }>;\n\n  constructor(private injector: Injector, private electronService: ElectronService) {\n    console.debug(\"c'tor ErrorService\");\n    this.errors = [];\n  }\n\n  /**\n   * Fehlerseite anzeigen\n   *\n   * Die Anwendung muss eine Route fuer \"/error\" bereitstellen.\n   *\n   * @param {string} short\n   * @param {string} desc\n   */\n  public newError(short: string, desc: string) {\n    if (!this.router) {\n      this.router = this.getRouter();\n    }\n    this.errors.push({title: short, message: desc});\n    console.debug(\"** newError\");\n    console.debug(short + \" - \" + desc);\n    this.router.navigateByUrl(\"/error\");\n  }\n\n  public getLastError() {\n    if (this.errors && this.errors.length > 0) {\n      return this.errors.pop();\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * Anwendung neu laden\n   *\n   * Im Browser wird das mit document.location.reload() erledigt.\n   *\n   * In electron wuerde das nicht funktionieren (zumindest nicht mit Angular-SPA).\n   * Da muss der Reload auf der electron-Seite erfolgen. Im electron start-script\n   * sieht das in etwa so aus:\n   * <pre>\n   *   ipcMain.on(\"reload-app\", function(event, arg) {\n   *     console.log(\"APP RELOAD \" + arg);\n   *     mainWindow.loadURL(url.format({\n   *                           pathname: path.join(__dirname, 'index.html'),\n   *                           protocol: 'file:',\n   *                           slashes: true\n   *                        }));\n   *   });\n   * </pre>\n   */\n  public resetApp() {\n    if (this.electronService.isElectron) {\n      this.electronService.ipcRenderer.send(\"reload-app\", \"errorService\");\n    } else {\n      document.location!.reload(true);\n    }\n  }\n\n  /**\n   * Zentraler Exception-Handler\n   *\n   * in AppModule:\n   *  providers: [{provide: ErrorHandler, useClass: ErrorService}]\n   *\n   * {@link https://angular.io/api/core/ErrorHandler}\n   *\n   * @param error\n   */\n  public handleError(error: any) {\n    console.debug(\"** handleError\");\n    console.dir(error);\n    this.newError(\"Anwendungsfehler\", error);\n  }\n\n  /*\n    Router kann nicht per DI geholt werden, da das eine zyklische Abhaengigkeit ausloest (Http -> Router-> Http)\n    Wenn Router spaeter geholt wird, gibt es keine Probleme. Entspricht nicht der reinen Lehre -> wenn mal Zeit ist\n    -> https://stackoverflow.com/questions/39767019\n   */\n  private getRouter(): Router {\n    return this.injector.get(Router);\n  }\n}\n"]}