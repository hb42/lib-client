{"version":3,"file":"version.service.js","sourceRoot":"","sources":["../../../src/service/version.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAEjC,OAAO,EACL,UAAU,GACX,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EACL,UAAU,EACV,OAAO,GACR,MAAM,eAAe,CAAC;AAEvB,OAAO,EACL,eAAe,GAEhB,MAAM,IAAI,CAAC;AAGZ,IAAa,cAAc,GAA3B,MAAa,cAAc;IAIzB,YAAoB,IAAgB,EAAU,eAAgC;QAA1D,SAAI,GAAJ,IAAI,CAAY;QAAU,oBAAe,GAAf,eAAe,CAAiB;IAC9E,CAAC;IAED,IAAW,GAAG;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;;;;;OAOG;IACU,IAAI,CAAC,aAAqB;;YACrC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE;iBAC7C,IAAI,CAAC,CAAO,CAAM,EAAE,EAAE;gBACrB,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE;oBACnC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;iBACxE;gBACD,IAAI;oBACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;oBAC3F,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;iBACvD;gBAAC,OAAO,CAAC,EAAE;oBACV,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;oBAC1D,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;iBACnB;gBACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,aAAa,EAAE;oBACjB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,EAAE;yBAC1C,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE;wBACX,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;wBACtC,OAAO,IAAI,CAAC,OAAO,CAAC;oBACtB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;wBACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,GAAG,GAAG,CAAC,CAAC;wBAClE,OAAO,IAAI,CAAC,OAAO,CAAC;oBACtB,CAAC,CAAC,CAAC;iBACR;qBAAM;oBACL,OAAO,IAAI,CAAC,OAAO,CAAC;iBACrB;YACH,CAAC,CAAA,CAAC,CAAC;QACT,CAAC;KAAA;IAEO,OAAO,CAAC,IAAS;QACvB,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB;QAC9D,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,QAAQ,GAAkB,IAAI,CAAC;QACnC,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnB,MAAM,GAAG,MAAM,CAAC;aACjB;iBAAM;gBACL,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChB,QAAQ,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrD;SACF;QACD,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;YACjC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;YACjC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;YACjC,UAAU,EAAE,MAAM;YAClB,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACzC,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;CAEF,CAAA;AApFY,cAAc;IAD1B,UAAU,EAAE;qCAKe,UAAU,EAA2B,eAAe;GAJnE,cAAc,CAoF1B;SApFY,cAAc","sourcesContent":["import * as semver from \"semver\";\n\nimport {\n  HttpClient,\n} from \"@angular/common/http\";\nimport {\n  Injectable,\n  VERSION,\n} from \"@angular/core\";\n\nimport {\n  ElectronService,\n  Version,\n} from \"./\";\n\n@Injectable()\nexport class VersionService {\n  private version: Version;\n  private serverversion: Version;\n\n  constructor(private http: HttpClient, private electronService: ElectronService) {\n  }\n\n  public get ver(): Version {\n    return this.version;\n  }\n  public get serverVer(): Version {\n    return this.serverversion;\n  }\n\n  /**\n   * Versions-Resource aus package.json initialisieren.\n   * Der String serverPackage muss eine URL fuer die Server-REST-API enthalten,\n   * deren Aufruf die package.json des Servers liefert.\n   *\n   * @param {string} serverPackage\n   * @returns {Promise<Version>}\n   */\n  public async init(serverPackage: string): Promise<Version> {\n    return this.http.get(\"./package.json\").toPromise()\n        .then(async (r: any) => {\n          r[\"versions\"] = [\"Angular \" + VERSION.full];\n          if (this.electronService.isElectron) {\n            r[\"versions\"].push(\"Electron \" + this.electronService.electronVersion);\n          }\n          try {\n            const gh = await this.http.get(\"./resource/git.ver\", { responseType: \"text\" }).toPromise();\n            r[\"githash\"] = gh.replace(/\\n/, \"\").replace(/\\r/, \"\");\n          } catch (e) {\n            console.error(\"Fehler beim Lesen von ./resource/git.ver\");\n            r[\"githash\"] = \"\";\n          }\n          this.version = this.makeVer(r);\n          if (serverPackage) {\n            return this.http.get(serverPackage).toPromise()\n                .then((sr) => {\n                  this.serverversion = this.makeVer(sr);\n                  return this.version;\n                }).catch((err) => {\n                  console.error(\"Fehler beim Ermitteln der Server-Version: \" + err);\n                  return this.version;\n                });\n          } else {\n            return this.version;\n          }\n        });\n  }\n\n  private makeVer(pack: any): Version {\n    const pre = semver.prerelease(pack.version); // ~['alpha', 10]\n    let prerel = \"\";\n    let prebuild: number | null = null;\n    if (pre && pre.length > 0) {\n      if (typeof pre[0] === \"number\") {\n        prebuild = +pre[0];\n        prerel = \"beta\";\n      } else {\n        prerel = pre[0];\n        prebuild = typeof pre[1] === \"number\" ? +pre[1] : 0;\n      }\n    }\n    const version = {\n      name: pack.name,\n      displayname: pack.displayname,\n      description: pack.description,\n      version: pack.version,\n      copyright: pack.copyright,\n      author: pack.author,\n      license: pack.license,\n      major: semver.major(pack.version),\n      minor: semver.minor(pack.version),\n      patch: semver.patch(pack.version),\n      prerelease: prerel,\n      build: prebuild,\n      githash: pack.githash ? pack.githash : \"\",\n      versions: pack.versions,\n    };\n    return version;\n  }\n\n}\n"]}