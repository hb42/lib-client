{"version":3,"file":"jwt-helper.service.js","sourceRoot":"","sources":["../../../../src/service/logon/jwt-helper.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\n\n/**\n * JsonWebToken-Handling\n *\n * payloadd aus dem JWT holen/ JWT -Ablauf ueberpruefen\n *\n * lifted from {@link https://github.com/auth0/angular2-jwt}\n */\n@Injectable()\nexport class JwtHelperService {\n\n  public urlBase64Decode(str: string): string {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0: {\n        break;\n      }\n      case 2: {\n        output += \"==\";\n        break;\n      }\n      case 3: {\n        output += \"=\";\n        break;\n      }\n      default: {\n        throw new Error(\"Illegal base64url string!\");\n      }\n    }\n    return this.b64DecodeUnicode(output);\n  }\n\n  public decodeToken(token: string): any {\n    const parts = token.split(\".\");\n\n    if (parts.length !== 3) {\n      throw new Error(\"The inspected token doesn\\'t appear to be a JWT. \" +\n          \"Check to make sure it has three parts and see https://jwt.io for more.\");\n    }\n\n    const decoded = this.urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error(\"Cannot decode the token.\");\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  public getTokenExpirationDate(token: string): Date | null {\n    let decoded: any;\n    decoded = this.decodeToken(token);\n\n    if (!decoded.hasOwnProperty(\"exp\")) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n    const date = this.getTokenExpirationDate(token);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (date === null) {\n      return false;\n    }\n\n    return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n  }\n\n  /* tslint:disable: no-conditional-assignment no-bitwise ban-comma-operator */\n  // credits for decoder goes to https://github.com/atk\n  private b64decode(str: string): string {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let output: string = \"\";\n\n    str = String(str).replace(/=+$/, \"\");\n\n    if (str.length % 4 === 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (\n        // initialize result and counters\n        let bc: number = 0, bs: any, buffer: any, idx: number = 0;\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        (\n            (bs = bc % 4 ? bs * 64 + buffer : buffer),\n                // and if not first of each 4 characters,\n                // convert the first 8 bits to one ascii character\n            bc++ % 4\n        )\n            ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n            : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  }\n\n  private b64DecodeUnicode(str: any) {\n    return decodeURIComponent(\n        Array.prototype.map\n            .call(this.b64decode(str), (c: any) => {\n              return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join(\"\"),\n    );\n  }\n\n}\n"]}