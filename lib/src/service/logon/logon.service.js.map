{"version":3,"file":"logon.service.js","sourceRoot":"","sources":["../../../../src/service/logon/logon.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable, Injector } from \"@angular/core\";\n\nimport { JwtToken, loginURL } from \"@hb42/lib-common\";\nimport { JwtHelperService } from \"./jwt-helper.service\";\n\nimport { LogonParameter } from \"./logon.parameter\";\nimport { LOGON_OPTIONS } from \"./logonToken\";\n\n/**\n * Anmeldung am Server erledigen und JSONWebToken managen\n *\n * Die Anwendung muss die benoetigte Konfiguration als {@link LOGON_OPTIONS}-Provider\n * bereitstellen.\n *\n * @todo Handling fuer Form-Login\n *\n * @see {@link LOGON_OPTIONS}\n * @see {@link LogonParameter}\n * @see {@link LogonInterceptor}\n */\n@Injectable()\nexport class LogonService {\n\n  private httphandler: HttpClient;\n  private logonPar: LogonParameter;\n  private dontcheck = false;\n  private urlswithouttoken: string[] = [];\n\n  private readonly ntlmURL: string;\n  private readonly loginURL: string;\n\n  public get dontCheckNow(): boolean {\n    return this.dontcheck;\n  }\n  public get active(): boolean {\n    return this.logonPar.logon !== \"NO\";\n  }\n  public get ntlm(): boolean {\n    return this.logonPar.logon === \"NTLM\";\n  }\n  public get urlsWithoutToken(): string[] {\n    return this.urlswithouttoken;\n  }\n\n  constructor(@Inject(LOGON_OPTIONS) logonPar: LogonParameter,\n              private injector: Injector,\n              private jwtHelper: JwtHelperService) {\n    console.debug(\"c'tor LogonService appName=\" + logonPar.appName);\n    this.logonPar = logonPar;\n    // Ausnahmen, bei denen keinToken geprueft wird\n    this.ntlmURL = this.logonPar.NTLMserver + \"?app=\" + this.logonPar.appName;\n    this.loginURL = this.logonPar.webserviceServer + loginURL + \"/\";\n    this.urlswithouttoken.push(this.ntlmURL);\n    this.urlswithouttoken.push(this.loginURL);\n  }\n\n  /**\n   * Fuer HttpInterceptor Autologin Token holen\n   *\n   * @returns {Promise<string>}\n   */\n  public getTokenWithCheck(): Promise<string> {\n    if (this.dontcheck) {  // Token wird gerade geholt -> warten\n      console.debug(\"LogonService: wait for new token\");\n      return this.waitForToken();\n    } else if (this.tokenExpiresIn(30)) {  // laeuft bald ab -> neues Token\n      console.debug(\"LogonService: tokenExpires - do autologin\");\n      // wirft im Fehlerfall Error -> evtl. hier Fehlerhandling mit try catch & ErrorService\n      // s. default-autologin-jwt-handler\n      return this.autoLogin();\n    } else {  // Token als Promise liefern\n      return new Promise<string>((resolve, reject) => {\n        resolve(this.getToken());\n      });\n    }\n  }\n\n  /**\n   * User auto login\n   *\n   * Fehler bei der Anmeldung wirft eine Exception, darum muss sich\n   * die Anwendung kuemmern.\n   *\n   * @returns {Promise<string>} JWT-Token\n   */\n  public autoLogin(): Promise<string> {\n    this.dontcheck = true;\n    if (!this.httphandler) {\n      this.httphandler = this.getHttp();\n    }\n    console.debug(\">>> AUTO LOGIN\");\n    console.debug(\">>> 1 getting ntlm user\");\n    return this.httphandler.get(this.ntlmURL)  // NTLM-Server aufrufen\n      .toPromise().then((tmp: any) => {\n        console.debug(\">>> 2 success temp-token=\" + tmp[\"token\"]);\n        console.debug(\">>> 3 logging into REST API\");                 // mit Token webserviceServer aufrufen\n        return this.httphandler.get(this.loginURL + tmp[\"token\"])\n          .toPromise().then((jwt: any) => {\n            console.debug(\">>> 4 result jwt-token=\" + jwt[\"jwt\"]);\n            if (jwt) {\n              this.setToken(jwt[\"jwt\"]);                 // in local storage ablegen\n              this.dontcheck = false;\n              return jwt[\"jwt\"];\n            } else {\n              console.error(\"*** Login not successful\");\n              this.dontcheck = false;\n              throw new Error(\"Login error - JWT is null\");\n            }\n          });\n      }) as Promise<string>;\n  }\n\n  /**\n   * get JWT payload\n   *\n   * @returns {any}\n   */\n  public getData(): any {\n    const token = this.getToken();\n    let jsonWebToken: any;\n    if (token) {\n      jsonWebToken = this.jwtHelper.decodeToken(token);\n    }\n    return (jsonWebToken ? jsonWebToken.data || {} : {});\n  }\n\n  /**\n   * Expires token in x seconds?\n   *\n   * @param {number} seconds\n   * @returns {boolean}\n   */\n  public tokenExpiresIn(seconds: number): boolean {\n    const token = this.getToken();\n    if (token) {\n      // const jwtHelper = new JwtHelperService();\n      return this.jwtHelper.isTokenExpired(token, seconds);\n    }\n    return true;\n  }\n\n  /**\n   * get Token from storage\n   *\n   * @returns {string}\n   */\n  public getToken(): string {\n    const token = localStorage.getItem(JwtToken);\n    return token ? token : \"\";\n  }\n\n  /**\n   * save token to storage\n   *\n   * @param {string} token\n   */\n  public setToken(token: string) {\n    // console.debug(\"save token \");\n    localStorage.setItem(JwtToken, token);\n  }\n\n  /**\n   * delete token\n   */\n  public clearToken(): void {\n    localStorage.removeItem(JwtToken);\n  }\n\n  /*\n    HttpClient kann nicht per DI geholt werden, da das eine zyklische Abhaengigkeit im AppModule ausloest\n    Wenn HttpClient spaeter geholt wird, gibt es keine Probleme. Entspricht nicht der reinen Lehre -> wenn mal Zeit ist\n    -> https://stackoverflow.com/questions/39767019\n   */\n  private getHttp(): HttpClient {\n    return this.injector.get<HttpClient>(HttpClient);\n  }\n\n  // Promise erzeugen, das wartet bis ein Token verfuegbar ist\n  private waitForToken(): Promise<string> {\n    return new Promise<string>((resolve: (token: string) => void) => {\n      this.timeoutfn(resolve, 10);\n    });\n  }\n  // rekursive Warteschleife\n  private timeoutfn(resolve: (token: string) => void, ms: number) {\n    setTimeout(() => {\n      if (this.dontcheck) {\n        this.timeoutfn(resolve, ms);\n      } else {\n        resolve(this.getToken());\n      }\n    }, ms);\n\n  }\n\n}\n"]}