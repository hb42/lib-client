{"version":3,"file":"logon-interceptor.js","sourceRoot":"","sources":["../../../../src/service/logon/logon-interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { JwtHeader } from \"@hb42/lib-common\";\nimport { EMPTY, from, Observable, throwError } from \"rxjs\";\nimport { catchError, mergeMap } from \"rxjs/operators\";\nimport { ErrorService } from \"../\";\nimport { LogonService } from \"./logon.service\";\n\n/**\n * {@link HttpInterceptor} fuer das Einfuegen eines JWT in die Aufrufe\n * zum REST-Server. Ausserdem werden HTTP-Fehler an den {@link ErrorService}\n * uebergeben (ausser 401 + 403, da wird die Anwendung neu geladen).\n *\n * Uebernommen aus {@link https://github.com/auth0/angular2-jwt}.\n *\n * @see {@link LOGON_OPTIONS}\n * @see {@link LogonService}\n * @see {@link LogonParameter}\n * @see {@link ErrorService}\n */\n@Injectable()\nexport class LogonInterceptor implements HttpInterceptor {\n\n  private whitelist: string[] = [];\n\n  constructor(private logonService: LogonService, private errorService: ErrorService) {\n    console.debug(\"c'tor LogonInterceptor\");\n    this.whitelist = logonService.urlsWithoutToken;\n  }\n\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // console.debug(\"INTERCEPT (1 check) \" + request.url);\n    if (!this.logonService.active || this.isWhitelisted(request)) {\n      // console.debug(\"no token check \" + request.url);\n      request = request.clone();\n      return this.errorHandling(request, next);\n    } else {\n      const token: Promise<string> = this.logonService.getTokenWithCheck();\n      return from(token).pipe(mergeMap((asyncToken: string) => {\n        // console.debug(\"insert token into request \" + request.url);\n        request = request.clone({setHeaders: {[JwtHeader]: asyncToken}});\n        return this.errorHandling(request, next);\n      }));\n    }\n  }\n\n  private isWhitelisted(request: HttpRequest<any>): boolean {\n    return (this.whitelist.findIndex((addr) => request.url.startsWith(addr)) > -1);\n  }\n\n  private errorHandling(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // console.debug(\"INTERCEPT (2 call) \" + request.url);\n    return next.handle(request).pipe(catchError((err: any, obs) => {\n      console.debug(\"LogonInterceptor: errorHandling \" + request.url);\n      console.dir(err);\n      if (err instanceof HttpErrorResponse) {\n        if (err.status === 0 /*&& err.type === 3*/) { // network error (Server weg?)\n          console.debug(\"LogonInterceptor: network error\");\n          this.errorService.newError(\"Network Error\", \"Der Server ist nicht erreichbar.\");\n        } else if (err.status >= 400) {\n          console.debug(\"LogonInterceptor: HTTP-Error \" + err.status);\n          if (err.status === 401 || err.status === 403) {\n            this.errorService.resetApp();\n          } else {\n            this.errorService.newError(err.status + \" - \" + err.statusText,\n                err.message || \"Server liefert ungueltige Daten.\");\n          }\n        }\n        return EMPTY; // Observable.empty();\n      } else {\n        // this.errorService.newError(\"Error\", JSON.stringify(err));\n        console.error(\"LogonInterceptor: unhandled exception - rethrow\");\n        return throwError(err);\n      }\n    }));\n  }\n\n}\n"]}