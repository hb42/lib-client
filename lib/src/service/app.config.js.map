{"version":3,"file":"app.config.js","sourceRoot":"","sources":["../../../src/service/app.config.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C;;;;;;;;;;;;;;;;;;;GAmBG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAS;IAIb,MAAM,CAAC,IAAI,CAAC,QAAgB;QACjC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;YACzC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YAChC,GAAG,CAAC,kBAAkB,GAAG,GAAG,EAAE;gBAC5B,IAAI,GAAG,CAAC,UAAU,KAAK,CAAC,EAAE;oBACxB,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;wBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;wBAC7C,OAAO,EAAE,CAAC;qBACX;yBAAM;wBACL,MAAM,CAAC,wBAAwB,QAAQ,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;qBAC5D;iBACF;YACH,CAAC,CAAC;YACF,GAAG,CAAC,IAAI,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AApBe,kBAAQ,GAAQ,EAAE,CAAC;AAFtB,SAAS;IADrB,UAAU,EAAE;GACA,SAAS,CAsBrB;SAtBY,SAAS","sourcesContent":["import { Injectable } from \"@angular/core\";\n\n/**\n * App-Configfile direkt, ohne Angular-Mechanismen. einlesen und\n * via AppConfig.settings.xxx in der Anwendung verfuegbar machen.\n *\n * Damit kann eine lokale Konfig-Datei geladen werden, bevor\n * Angular initialiert wird:\n *\n * <pre>\n *   AppConfig.load(environment.configFile).then(() => {\n *     platformBrowserDynamic().bootstrapModule(AppModule)\n *       .catch((err) => {\n *         console.info(\"Runtime-ERROR \" + err);\n *       })\n *  });\n *  </pre>\n *\n * Falls der Angular-Compiler ngc ueber diese Datei stolpert:\n * in tsconfig.json unter \"angularCompilerOptions\" \"strictMetadataEmit\"\n * auf \"false\" setzen.\n */\n@Injectable()\nexport class AppConfig {\n\n  public static settings: any = {};\n\n  public static load(jsonFile: string) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.overrideMimeType(\"application/json\");\n      xhr.open(\"GET\", jsonFile, true);\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            this.settings = JSON.parse(xhr.responseText);\n            resolve();\n          } else {\n            reject(`Could not load file '${jsonFile}': ${xhr.status}`);\n          }\n        }\n      };\n      xhr.send();\n    });\n  }\n}\n"]}