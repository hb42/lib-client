{"version":3,"file":"xhrbackend.handler.js","sourceRoot":"","sources":["../../../src/override/xhrbackend.handler.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AACH,EAAE;AACF,WAAW;AACX,gBAAgB;AAChB,0BAA0B;AAC1B,WAAW;AACX,gBAAgB;AAChB,aAAa;AACb,cAAc;AACd,qBAAqB;AACrB,gBAAgB;AAChB,mBAAmB;AACnB,kBAAkB;AAClB,0BAA0B;AAC1B,WAAW;AACX,kBAAkB;AAClB,iBAAiB;AACjB,oCAAoC;AACpC,EAAE;AACF,MAAM;AACN,6EAA6E;AAC7E,0EAA0E;AAC1E,KAAK;AACL,wDAAwD;AACxD,yCAAyC;AACzC,KAAK;AACL,MAAM;AACN,EAAE;AACF,gBAAgB;AAChB,sDAAsD;AACtD,EAAE;AACF,8FAA8F;AAC9F,sDAAsD;AACtD,4DAA4D;AAC5D,8CAA8C;AAC9C,MAAM;AACN,EAAE;AACF,QAAQ;AACR,qBAAqB;AACrB,OAAO;AACP,2EAA2E;AAC3E,oFAAoF;AACpF,2EAA2E;AAC3E,6BAA6B;AAC7B,OAAO;AACP,oHAAoH;AACpH,mHAAmH;AACnH,6CAA6C;AAC7C,OAAO;AACP,oHAAoH;AACpH,4GAA4G;AAC5G,OAAO;AACP,kHAAkH;AAClH,OAAO;AACP,uEAAuE;AACvE,QAAQ;AACR,+DAA+D;AAC/D,SAAS;AACT,oFAAoF;AACpF,6BAA6B;AAC7B,sFAAsF;AACtF,UAAU;AACV,sCAAsC;AACtC,4EAA4E;AAC5E,EAAE;AACF,mFAAmF;AACnF,+DAA+D;AAC/D,0EAA0E;AAC1E,+GAA+G;AAC/G,4CAA4C;AAC5C,qEAAqE;AACrE,4BAA4B;AAC5B,kFAAkF;AAClF,kCAAkC;AAClC,gCAAgC;AAChC,YAAY;AACZ,mFAAmF;AACnF,kEAAkE;AAClE,sFAAsF;AACtF,qEAAqE;AACrE,0BAA0B;AAC1B,sEAAsE;AACtE,wBAAwB;AACxB,0BAA0B;AAC1B,sEAAsE;AACtE,+EAA+E;AAC/E,wBAAwB;AACxB,yBAAyB;AACzB,8FAA8F;AAC9F,iHAAiH;AACjH,uEAAuE;AACvE,wBAAwB;AACxB,eAAe;AACf,UAAU;AACV,EAAE;AACF,+DAA+D;AAC/D,0EAA0E;AAC1E,+FAA+F;AAC/F,aAAa;AACb,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B,MAAM;AACN,EAAE;AACF,IAAI","sourcesContent":["/**\n * Created by hb on 07.08.16.\n *\n * HTTP-Errors abfangen und withCredentials setzen\n *\n * s. http://stackoverflow.com/questions/34934009/handling-401s-globally-with-angular-2\n *\n * *** Fuer den Fall, dass so etwas mal gebraucht wird ... ***\n */\n//\n// import {\n//   Injectable,\n// } from \"@angular/core\";\n// import {\n//   BrowserXhr,\n//   Request,\n//   Response,\n//   ResponseOptions,\n//   XHRBackend,\n//   XHRConnection,\n//   XSRFStrategy,\n// } from \"@angular/http\";\n// import {\n//     Observable,\n// } from \"rxjs\";\n// import \"rxjs/add/operator/catch\";\n//\n// /**\n//  * -> https://dpopescu.me/2016/10/08/using-http-interceptors-in-angular-2/\n//  *    (Ohne @Injectable und ohne c'tor funktioniert's allerdings nicht)\n//  *\n//  * -> https://github.com/angular/angular/issues/11178\n//  *    (falls es Probleme mit AOT gibt)\n//  *\n//  */\n//\n// @Injectable()\n// export class XHRBackendHandler extends XHRBackend {\n//\n//   constructor(private browserXhr: BrowserXhr, private baseResponseOptions: ResponseOptions,\n//               private xsrfStrategy: XSRFStrategy) {\n//     super(browserXhr, baseResponseOptions, xsrfStrategy);\n//     console.info(\"c'tor HttpErrorHandler\");\n//   }\n//\n//   /**\n//    * error handler\n//    *\n//    * \"normale\" Server-Fehler liefern den HTTP-Status in Response.status.\n//    * Bei uncaught exception auf Serverseite kommen keine verwertbaren Daten, weil\n//    * der x-allow-origin header fehlt, Status ist 200, type ist 3 \"error\"\n//    * -> status 500 liefern\n//    *\n//    * (RFC 2616: A response has an associated type which is 0\"basic\", 1\"cors\", 2\"default\", 3\"error\", 4\"opaque\", or\n//    *            5\"opaqueredirect\". Unless stated otherwise, it is \"default\". A response whose type is \"error\" is\n//    *            known as a network error.)\n//    *\n//    * Server liefert 403 Forbidden, wenn Userberechtigung fehlt -> app reset, ein unberechtigter call haette schon\n//    *                                                              auf app-Seite verhindert werden muessen\n//    *\n//    * Server liefert 401 Unauthorized wenn SessinID invalid -> reload, das duerfte i.d.R. ein Sessionablauf sein\n//    *\n//    * die restlichen 4xx und 5xx sollten auf einer Fehlerseite landen\n//    */\n//   public createConnection(request: Request): XHRConnection {\n//     /*\n//      * Fuer alle Requests \"withCredentials\" setzen, sonst wird der Session-Cookie\n//      * nicht mitgeschickt.\n//      * [ Alternativ fuer jeden Request setzen: .get(url, {withCredentials: true}) ]\n//      */\n//     request.withCredentials = true;\n//     const xhrConnection: XHRConnection = super.createConnection(request);\n//\n//     xhrConnection.response = xhrConnection.response.catch((error: Response) => {\n//       // base href -> wird zum vollstaendigen Pfad erweitert\n//     //  const myurl = document.getElementsByTagName(\"base\")[0][\"href\"];\n//       // let myurl = window.location.protocol + \"//\" + window.location.hostname + \":\" + window.location.port\n//       //     + this.env.metadata.BASEURL;\n//       console.info(\"HTTP error \", error.status, error.statusText);\n//       console.dir(error);\n//       if (error.status) {  // error is type Response -> Fehler auf Server-Seite\n//         if (error.type === 3) {\n//           error.status = 500;\n//         }\n//         // die Anwendung muss eine Fehlerseite mit zwei Parametern bereitstellen\n//         window.location.assign(\"/#/error/\" + error.status + \"/\"\n//                                     + decodeURIComponent(error.statusText || \"-\"));\n//         // switch (error.status) {  // hier ist kein return noetig\n//         //   case 403 :\n//         //     window.location.assign(\"/#/error/403\"); // zum Start\n//         //     break;\n//         //   case 401 :\n//         //     window.location.assign(\"/#/error/401\"); // zum Start\n//         //     // window.location.reload();      // aktuelle Seite neu laden\n//         //     break;\n//         //   default :\n//         //     window.location.assign(\"/#/error/\" + error.status + \"/\" + error.statusText);\n//         //     // window.location.assign(myurl + \"/error.html\" + \"?base=\" + myurl + \"&msg=\" + error.statusText\n//         //     //                        + \"&stat=\" + error.status);\n//         //     break;\n//         // }\n//       }\n//\n//       // if (error.status === 401 || error.status === 403) {\n//       //   console.info(\"HTTP error \", error.status, error.statusText);\n//       //   window.location.href = window.location.href + '?' + new Date().getMilliseconds();\n//       // }\n//       return Observable.throw(error);\n//     });\n//     return xhrConnection;\n//   }\n//\n// }\n"]}